#ifndef DATAMAKER
#define DATAMAKER 1
#include<fstream>
#include<ctime>
#include<vector>
#include<typeinfo>
#include<map>
namespace std
{
	ifstream fin;
	ofstream fout;
	FILE *fr,*fw;
	FILE *__cdecl fileo(char *name,char c)
	{
		if(c=='r')
		{
			fin.open(name,ios::in);

			return fr=fopen(name,"r");
		}
		if(c=='w')
		{
			fout.open(name,ios::out);
			return fw=fopen(name,"w");
		}
		if(c=='a')
		{
			fin.open(name,ios::in);
		    fout.open(name,ios::out);
		    return fr=fopen(name,"r"),fw=fopen(name,"w");
		}
		else return nullptr;
	}
	int __cdecl filec(char c)
	{
		if(c=='r')
		{
			fin.close();
			return fclose(fr);
		}
		if(c=='w')
		{
			fout.close();
			return fclose(fw);
		}
		if(c=='a')
		{
			fin.close();
			fout.close();
			return fclose(fr),fclose(fw);
		}
		else return 0;
	}
	#ifndef GRAPH
	#define GRAPH
	template<typename T1,typename T2>
	struct graph{
		vector<T1> v;
		struct edge1{
			int u,v;
			T2 w;
			friend ostream& operator <<(ostream& out,const edge1 &e)
			{
					out<<e.u<<" "<<e.v<<" "<<e.w;
					return out;
			}
		};
		vector<edge1> e;
		bool add(int u,int v,T2 w)
		{
			if(u<0||v<0) return false;
			edge1 p;
			p.u=u;
			p.v=v;
			p.w=w;
			e.push_back(p);
			return true;
		}
		friend ostream& operator <<(ostream& out,const graph &g)
		{
				for(auto i:g.v)
				{
					out<<i;
				}
				for(auto i:g.w)
				{
					out<<i;
				}
				return out;
		}
	};
	#endif
	void brand(int &t)
	{
		srand(time(NULL));
		int times=(rand()-1)%5+1;
		for(int i=1;i<=times;i++)
		{
			t=t*rand()+rand();
		}
	}
	void brand(long long &t)
	{
		srand(time(NULL));
		long long times=(rand()-1)%10+1;
		for(int i=1;i<=times;i++)
		{
			t=t*rand()+rand();
		}
	}
	void brand(char &t)
	{
		int t1;
		brand(t1);
		t=t1%128;
	}
	template<typename T>
	void brand(T *t,int &len)
	{
		if(len==0) brand(len);
		for(int i=0;i<len;i++)
		{
			brand(*(t+i));
		}
	}
	void brand(string &s,long long &len)
	{
		if(len==0) brand(len);
		char c;
		for(int i=0;i<len;i++)
		{
			brand(c);
			s.push_back(c);
		}
	}
	template<typename T>
	void brand(vector<T> &t)
	{
		int len;
		brand(len);
		for(int i=1;i<=len;i++)
		{
			T p;
			brand(p);
			t.push_back(p);
		}
	}
	template<typename T>
	T brand_l_r(const T &l,const T &r)
	{
		T t;
		brand(t);
		return t%(l-r+1)+l;
	}
	template<typename T1,typename T2>
	void brand(graph<T1,T2> &g)
	{
			T1 t;
			T2 w;
			int i,len;
			brand(len);
			for(i=1;i<=len;i++)
			{
				brand(t);
				g.v.push_back(t);
			}
			brand(len);
			for(i=1;i<=len;i++)
			{
				brand(w);
				g.v.push_back(w);
			}
	}
	#ifndef TREE
	#define TREE
	template<typename ndata>
	struct tree{
		struct node{
			ndata w;
			vector<node*> child;
			node *fa;
		};
		vector<node> v;
	};
	
	#endif
	template<typename ...Args>
	int __cdecl fprint(const char *format,Args... argument)
	{
		return fprintf(fw,format,argument...);
	}
	template<typename ...Args>
	int __cdecl fscan(const char *format,Args&... argument)
	{
		return fscanf(fr,format,argument...);
	}
}
#endif
